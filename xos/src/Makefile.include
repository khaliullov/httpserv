######################################################################
# The rest of this is a work in progress, but should not
# need modification
######################################################################
BUILD ?= release

CC             ?= gcc
CXX            ?= g++
LD             ?= ld
OBJCPY         ?= objcopy

BINDIR          = bin
DEPDIR          = .deps
OBJDIR          = .objs
LIBDIR          = $(shell pwd)/lib
INCLUDEDIR      = $(shell pwd)/include

DBG_TARGETS     = $(TARGETS:%=%.debug)
COV_TARGETS     = $(TARGETS:%=%.coverage)

DBG_LIB_TARGETS = $(LIB_TARGETS:%=%.debug)
COV_LIB_TARGETS = $(LIB_TARGETS:%=%.coverage)

#
# Print out our settings
#
WS = $(BLANK) $(BLANK)

#$(info $(WS) INCLUDES_base = '$(INCLUDES_base)')
#$(info $(WS)  DEFINES_base = '$(DEFINES_base)')
#$(info $(WS)   CFLAGS_base = '$(CFLAGS_base)')
#$(info $(WS) CXXFLAGS_base = '$(CXXFLAGS_base)')
#$(info $(WS)  LDFLAGS_base = '$(LDFLAGS_base)')
#$(info $(WS)     LIBS_base = '$(LIBS_base)')

#
# Cute stuff to beautify make output - use 'make V=1' to see command output
#
V           ?= 0
Q_0          = @
Q            = $(Q_$(V))
QDEP_0       = @echo "       DEP" $<;
QDEP         = $(QDEP_$(V))

QCC_0        = @echo "        CC" $<;
QCC          = $(QCC_$(V))
QCXX_0       = @echo "       CXX" $<;
QCXX         = $(QCXX_$(V))
QLINK_0      = @echo "      LINK" $@;
QLINK        = $(QLINK_$(V))
QSYM_0       = @echo "       SYM" $@;
QSYM         = $(QSYM_$(V))
QSTRIP_0     = @echo "     STRIP" $@;
QSTRIP       = $(QSTRIP_$(V))
QLNKSYM_0    = @echo "    LNKSYM" $@;
QLNKSYM      = $(QLNKSYM_$(V))
QAR_0        = @echo "        AR" $@;
QAR          = $(QAR_$(V))
QRANLIB_0    = @echo "    RANLIB" $@;
QRANLIB      = $(QRANLIB_$(V))


QDEPDBG_0    = @echo "       DEP $< [debug]";
QDEPDBG      = $(QDEPDBG_$(V))
QCCDBG_0     = @echo "        CC $< [debug]";
QCCDBG       = $(QCCDBG_$(V))
QCXXDBG_0    = @echo "       CXX $< [debug]";
QCXXDBG      = $(QCXXDBG_$(V))
QLINKDBG_0   = @echo "      LINK $@ [debug]";
QLINKDBG     = $(QLINKDBG_$(V))

QDEPCOV_0    = @echo "       DEP $< [coverage]";
QDEPCOV      = $(QDEPCOV_$(V))
QCCCOV_0     = @echo "        CC $< [coverage]";
QCCCOV       = $(QCCCOV_$(V))
QCXXCOV_0    = @echo "       CXX $< [coverage]";
QCXXCOV      = $(QCXXCOV_$(V))
QLINKCOV_0   = @echo "      LINK $@ [coverage]";
QLINKCOV     = $(QLINKCOV_$(V))

HIDEOUTPUT_0 = "/dev/null"
HIDEOUTPUT_1 = "/dev/stdout"
HIDEOUTPUT   = $(HIDEOUTPUT_$(V))

######################################################################
# Auto-rules
######################################################################

#
# Create dependency '.d' file
#
$(DEPDIR)/%.d: %.cc | $(DEPDIR)
	$(QDEP)$(CXX) -MM -MP -MT '$(OBJDIR)/$*.o $@' \
	  $(CXXFLAGS_release) $< > $@

$(DEPDIR)/%.debug.d: %.cc | $(DEPDIR)
	$(QDEPDBG)$(CXX) -MM -MP -MT '$(OBJDIR)/$*.debug.o $@' \
	  $(CXXFLAGS_debug) $< > $@

$(DEPDIR)/%.coverage.d: %.cc | $(DEPDIR)
	$(QDEPCOV)$(CXX) -MM -MP -MT '$(OBJDIR)/$*.coverage.o $@' \
	  $(CXXFLAGS_coverage) $< > $@

$(DEPDIR)/%.d: %.c | $(DEPDIR)
	$(QDEP)$(CC) -MM -MP -MT '$(OBJDIR)/$*.o $@' $(CFLAGS_release) $< > $@

$(DEPDIR)/%.debug.d: %.c | $(DEPDIR)
	$(QDEPDBG)$(CC) -MM -MP -MT '$(OBJDIR)/$*.debug.o $@' \
	   $(CFLAGS_debug) $< > $@

$(DEPDIR)/%.coverage.d: %.c | $(DEPDIR)
	$(QDEPCOV)$(CC) -MM -MP -MT '$(OBJDIR)/$*.coverage.o $@' \
	  $(CFLAGS_coverage) $< > $@

#
# Source unit compilation
#
$(OBJDIR)/%.o: %.cc | $(OBJDIR)
	$(QCXX)$(CXX) $(CXXFLAGS_release) -c $< -o $@

$(OBJDIR)/%.debug.o: %.cc | $(OBJDIR)
	$(QCXXDBG)$(CXX) $(CXXFLAGS_debug) -c $< -o $@

$(OBJDIR)/%.coverage.o: %.cc | $(OBJDIR)
	$(QCXXCOV)$(CXX) $(CXXFLAGS_coverage) -c $< -o $@

$(OBJDIR)/%.o: %.c | $(OBJDIR)
	$(QCC)$(CC) $(CFLAGS_release) -c $< -o $@

$(OBJDIR)/%.debug.o: %.c | $(OBJDIR)
	$(QCC)$(CC) $(CFLAGS_debug) -c $< -o $@

$(OBJDIR)/%.coverage.o: %.c | $(OBJDIR)
	$(QCCCOV)$(CC) $(CFLAGS_coverage) -c $< -o $@


#
# TARGETS
#

#.PHONY: all release debug coverage subdirs libs

all: release

release: $(LIB_TARGETS) $(TARGETS) subdirs

debug: $(DBG_LIB_TARGETS) $(DBG_TARGETS) subdirs 

coverage: $(COV_LIB_TARGETS) $(COV_TARGETS) subdirs

check: release

debug-check: debug

coverage-check: coverage 

coverage.info:
	$(MAKE) coverage-check
	lcov --no-external --capture --directory . --output-file $@ > /dev/null

covreport: coverage.info
	rm -rf coverage-report
	genhtml $< --quiet --frames --show-details --demangle-cpp \
	           --legend --output-directory coverage-report --num-spaces=4
	chromium-browser coverage-report/index.html


tags: subdirs
	ctags -R .

# docs: doc/html

# doc/html: doc/Doxyfile $(shell find . -name '*.cc' -o -name '*.h')
#	rm -rf $@
#	doxygen doc/Doxyfile

codecount:
	@LC_ALL=en_GB.utf8 \
		/usr/bin/printf "     Headers: %' 7d\n" \
		$$(find . -name '*.h' | \
		   xargs wc -l | tail -1 | sed -e 's/total//g')
	@LC_ALL=en_GB.utf8 \
		/usr/bin/printf "      Source: %' 7d\n" \
		$$(find . -name '*.cc' -o -name '*.c' | \
		   xargs wc -l | tail -1 | sed -e 's/total//g')
	@LC_ALL=en_GB.utf8 \
		/usr/bin/printf "Total Source: %' 7d\n" \
		$$(find . -name '*.cc' -o -name '*.c' -o -name '*.h' | \
		   xargs wc -l | tail -1 | sed -e 's/total//g')
	@LC_ALL=en_GB.utf8 \
		/usr/bin/printf "       Build: %' 7d\n" \
		$$(find . -name 'Makefile*' \
		   | xargs wc -l | tail -1 | sed -e 's/total//g')
clean: subdirs
	rm -rf $(OBJDIR) $(LIBDIR) $(BINDIR) \
	*.info core core.[0123456789]* a.out *.symbols

docclean: subdirs
	rm -rf doc/html

realclean: subdirs clean docclean
	rm -rf $(DEPDIR) .ycm_extra_conf.pyc config.cache tags coverage-report

.PHONY: $(SUBDIRS)

subdirs: $(SUBDIRS)

$(SUBDIRS):
	@echo "Making '$(MAKECMDGOALS)' in $@"
	$(MAKE) DESTDIR=$(shell pwd) -C $@ $(MAKECMDGOALS)

$(DEPDIR) $(OBJDIR) $(BINDIR) $(LIBDIR):
	$(Q)mkdir -p $@

#
# This is the main bit of logic in this file. MAKE_PROGRAM gets expanded
# for each target in TARGETS. It creates both release and debug targets
# based on the files listed in the user-supplied $(target_OBJS) variable.
#
# If editing, make sure you use double dollar signs to avoid expansion until
# the macro is called below in the $(foreach)
#
define MAKE_PROGRAM
  #
  # We need this to eat the whitespace in the parameter expansion
  #
  PROG = $(1)
  EXE = $$(BINDIR)/$$(PROG)

  #
  # Place compiled objects in $(OBJDIR)
  #
  $$(PROG)_OBJS := $$($$(PROG)_OBJS:%.o=$$(OBJDIR)/%.o)
  $$(PROG)_DBG_OBJS = $$($$(PROG)_OBJS:%.o=%.debug.o)
  $$(PROG)_COV_OBJS = $$($$(PROG)_OBJS:%.o=%.coverage.o)

  $$(PROG): $$(EXE)
  $$(PROG).debug: $$(EXE).debug
  $$(PROG).coverage: $$(EXE).coverage

  .PHONY: $$(PROG) $$(PROG).debug $$(PROG).coverage

  #
  # Link the release build, then strip it, preserving debug symbols in
  # $(target).symbols
  #
  $$(EXE): $$($$(PROG)_OBJS) | $$(BINDIR)
	$$(QLINK)$$(CXX) $$(CXXFLAGS_release) -o $$@ $$^ \
		$$(LDFLAGS_release) $$(LIBS_release)
	$$(QSYM)$$(OBJCPY) --only-keep-debug $$@ $$@.symbols
	$$(QSTRIP)$$(OBJCPY) --strip-all $$@
	$$(QLNKSYM)$$(OBJCPY) --add-gnu-debuglink $$@.symbols $$@
	$$(Q)chmod 644 $$@.symbols

  # Debug
  $$(EXE).debug: $$($$(PROG)_DBG_OBJS) | $$(BINDIR)
	$$(QLINKDBG)$$(CXX) $$(CXXFLAGS_debug) -o $$@ \
		$$^ $$(LDFLAGS_debug) $$(LIBS_debug)

  # Coverage
  $$(EXE).coverage: $$($$(PROG)_COV_OBJS) | $$(BINDIR)
	$$(QLINKCOV)$$(CXX) $$(CXXFLAGS_coverage) -o $$@ \
		$$^ $$(LDFLAGS_coverage) $$(LIBS_coverage)

  #
  # a normal equal here causes recursive expansion
  #
  OBJS := $$(OBJS) $$($$(PROG)_OBJS)
  OBJS := $$(OBJS) $$($$(PROG)_DBG_OBJS)
  OBJS := $$(OBJS) $$($$(PROG)_COV_OBJS)
endef

define MAKE_LIBRARY
  #
  # We need this to eat the whitespace in the parameter expansion
  #
  LIBNAME = $(1)

  STATIC_LIB = $$(LIBDIR)/$$(LIBNAME).a
  DBG_STATIC_LIB = $$(LIBDIR)/$$(LIBNAME).debug.a
  COV_STATIC_LIB = $$(LIBDIR)/$$(LIBNAME).coverage.a

  #
  # Library objects to build
  #
  $$(LIBNAME)_OBJS := $$($$(LIBNAME)_OBJS:%.o=$$(OBJDIR)/%.o)
  $$(LIBNAME)_DBG_OBJS = $$($$(LIBNAME)_OBJS:%.o=%.debug.o)
  $$(LIBNAME)_COV_OBJS = $$($$(LIBNAME)_OBJS:%.o=%.coverage.o)

  $$(LIBNAME): $$(STATIC_LIB)
  $$(LIBNAME).debug: $$(DBG_STATIC_LIB)
  $$(LIBNAME).coverage: $$(COV_STATIC_LIB)

  $$(STATIC_LIB): $$($$(LIBNAME)_OBJS) | $$(LIBDIR)
	$$(QAR)ar -cSurv $$@ $$^
	$$(QRANLIB)ranlib $$@
	@if [ -n "$$(DESTDIR)" ]; then \
		mkdir -p $$(DESTDIR)/lib; \
	    cp -v $$@ $$(DESTDIR)/lib; \
	fi

  # Debug
  $$(DBG_STATIC_LIB): $$($$(LIBNAME)_DBG_OBJS) | $$(LIBDIR)
	$$(QAR)ar -cSurv $$@ $$^
	$$(QRANLIB)ranlib $$@
	@if [ -n "$$(DESTDIR)" ]; then \
		mkdir -p $$(DESTDIR)/lib; \
	    cp -v $$@ $$(DESTDIR)/lib; \
	fi


  # Coverage
  $$(COV_STATIC_LIB): $$($$(LIBNAME)_COV_OBJS) | $$(LIBDIR)
	$$(QAR)ar -cSurv $$@ $$^
	$$(QRANLIB)ranlib $$@
	@if [ -n "$$(DESTDIR)" ]; then \
		mkdir -p $$(DESTDIR)/lib; \
	    cp -v $$@ $$(DESTDIR)/lib; \
	fi

  #
  # a normal equal here causes recursive expansion
  #
  OBJS := $$(OBJS) $$($$(LIBNAME)_OBJS)
  OBJS := $$(OBJS) $$($$(LIBNAME)_DBG_OBJS)
  OBJS := $$(OBJS) $$($$(LIBNAME)_COV_OBJS)
endef

#
# loop through the targets, generating our link rules
#
$(foreach T, $(TARGETS),$(eval $(call MAKE_PROGRAM, $(T))))

$(foreach T, $(LIB_TARGETS),$(eval $(call MAKE_LIBRARY, $(T))))

#
# deps are auto-generated from the accumulated list of OBJS from the
# expansion above
#
DEPS     = $(OBJS:$(OBJDIR)/%.o=$(DEPDIR)/%.d)

ifneq ($(MAKECMDGOALS), clean)
 ifneq ($(MAKECMDGOALS), docclean)
  ifneq ($(MAKECMDGOALS), realclean)
   -include $(DEPS)
  endif
 endif
endif
